/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.gconstantino.audiorecorder;

import java.io.File;
import java.io.IOException;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;

import android.content.Context;
import android.content.ContextWrapper;
import android.media.MediaRecorder;
import android.os.Environment;

@Kroll.module(name = "Audiorecorder", id = "com.gconstantino.audiorecorder")
public class AudiorecorderModule extends KrollModule {

    // Standard Debugging variables
    private static final String LCAT = "AudiorecorderModule";
    private static final boolean DBG = TiConfig.LOGD;
    private MediaRecorder mRecorder = null;
    private String audioStoragePath;
    private boolean recording = false;
    String file = "audio.3gp";

    // You can define constants with @Kroll.constant, for example:
    // @Kroll.constant public static final String EXTERNAL_NAME = value;

    public AudiorecorderModule() {
	super();
    }

    @Kroll.onAppCreate
    public static void onAppCreate(TiApplication app) {
	Log.d(LCAT, "inside onAppCreate");
	// put module init code that needs to run when the application is created
    }

    private void recordAudio() {
	if (!recording) {
	    recording = true;
	    mRecorder = new MediaRecorder();
	    mRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
	    mRecorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);

	    File directory = new File (Environment.getExternalStorageDirectory().getAbsolutePath(), "/Audios");
	    File file = new File(directory.getAbsolutePath(), this.file);
	    audioStoragePath = file.getAbsolutePath();
	    Log.d(LCAT, "File: " + file + " Path: " + audioStoragePath);
	    boolean success = true;
	    if (!directory.exists()) {
		directory.mkdirs();
	    }
	    if (success) {
		Log.d(LCAT, directory + " created.");
	    } else {
		Log.d(LCAT, directory + " NOT created.");
	    }
	    mRecorder.setOutputFile(audioStoragePath);

	    mRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);
	    try {
		mRecorder.prepare();
	    } catch (IOException e) {
		Log.e(LCAT, "prepare() failed");
		Log.e(LCAT, e.toString());
	    }

	    mRecorder.start();
	}
    }

    private void stopRecordingAudio() {
	if (recording) {
	    recording = false;
	    mRecorder.stop();
	    mRecorder.release();
	    mRecorder = null;
	}
    }

    // Methods
    @Kroll.method
    public void start() {
	Log.d(LCAT, "start Rec called");
	try {
	    recordAudio();
	} catch (Exception e) {
	    Log.debug(LCAT, e.toString());
	}
    }

    @Kroll.method
    public String stop() {
	Log.d(LCAT, "stop Rec called");
	try {
	    stopRecordingAudio();
	} catch (Exception e) {
	    Log.debug(LCAT, e.toString());
	}
	return audioStoragePath;
    }

    @Kroll.method
    public boolean getRecording() {
	Log.d(LCAT, "get Recording called");
	return this.recording;
    }

}
